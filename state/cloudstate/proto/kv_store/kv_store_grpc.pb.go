// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kv_store

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyValueStoreClient is the client API for KeyValueStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyValueStoreClient interface {
	GetState(ctx context.Context, in *GetStateEnvelope, opts ...grpc.CallOption) (*GetStateResponseEnvelope, error)
	SaveState(ctx context.Context, in *SaveStateEnvelope, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteState(ctx context.Context, in *DeleteStateEnvelope, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type keyValueStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyValueStoreClient(cc grpc.ClientConnInterface) KeyValueStoreClient {
	return &keyValueStoreClient{cc}
}

func (c *keyValueStoreClient) GetState(ctx context.Context, in *GetStateEnvelope, opts ...grpc.CallOption) (*GetStateResponseEnvelope, error) {
	out := new(GetStateResponseEnvelope)
	err := c.cc.Invoke(ctx, "/cloudstate.KeyValueStore/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) SaveState(ctx context.Context, in *SaveStateEnvelope, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloudstate.KeyValueStore/SaveState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueStoreClient) DeleteState(ctx context.Context, in *DeleteStateEnvelope, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cloudstate.KeyValueStore/DeleteState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyValueStoreServer is the server API for KeyValueStore service.
// All implementations should embed UnimplementedKeyValueStoreServer
// for forward compatibility
type KeyValueStoreServer interface {
	GetState(context.Context, *GetStateEnvelope) (*GetStateResponseEnvelope, error)
	SaveState(context.Context, *SaveStateEnvelope) (*emptypb.Empty, error)
	DeleteState(context.Context, *DeleteStateEnvelope) (*emptypb.Empty, error)
}

// UnimplementedKeyValueStoreServer should be embedded to have forward compatible implementations.
type UnimplementedKeyValueStoreServer struct {
}

func (UnimplementedKeyValueStoreServer) GetState(context.Context, *GetStateEnvelope) (*GetStateResponseEnvelope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedKeyValueStoreServer) SaveState(context.Context, *SaveStateEnvelope) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveState not implemented")
}
func (UnimplementedKeyValueStoreServer) DeleteState(context.Context, *DeleteStateEnvelope) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteState not implemented")
}

// UnsafeKeyValueStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyValueStoreServer will
// result in compilation errors.
type UnsafeKeyValueStoreServer interface {
	mustEmbedUnimplementedKeyValueStoreServer()
}

func RegisterKeyValueStoreServer(s grpc.ServiceRegistrar, srv KeyValueStoreServer) {
	s.RegisterService(&KeyValueStore_ServiceDesc, srv)
}

func _KeyValueStore_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateEnvelope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudstate.KeyValueStore/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).GetState(ctx, req.(*GetStateEnvelope))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_SaveState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveStateEnvelope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).SaveState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudstate.KeyValueStore/SaveState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).SaveState(ctx, req.(*SaveStateEnvelope))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueStore_DeleteState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStateEnvelope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueStoreServer).DeleteState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudstate.KeyValueStore/DeleteState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueStoreServer).DeleteState(ctx, req.(*DeleteStateEnvelope))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyValueStore_ServiceDesc is the grpc.ServiceDesc for KeyValueStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyValueStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudstate.KeyValueStore",
	HandlerType: (*KeyValueStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _KeyValueStore_GetState_Handler,
		},
		{
			MethodName: "SaveState",
			Handler:    _KeyValueStore_SaveState_Handler,
		},
		{
			MethodName: "DeleteState",
			Handler:    _KeyValueStore_DeleteState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kv_store.proto",
}
